{"name":"Commander","tagline":"Command-line interface builder for the Crystal programming language.","body":"## Commander\r\n\r\n[![Build Status](https://travis-ci.org/meskyanichi/commander.svg)](https://travis-ci.org/meskyanichi/commander)\r\n\r\nCommand-line interface builder for the [Crystal] programming language. \r\n\r\n\r\n#### Installation\r\n\r\nAdd this to your application's `shard.yml`:\r\n\r\n```yaml\r\ndependencies:\r\n  commander:\r\n    github: meskyanichi/commander\r\n```\r\n\r\n\r\n#### Usage\r\n\r\nPractically everything you need to know in one example:\r\n\r\n```crystal\r\nrequire \"commander\"\r\n\r\ncli = Commander::Command.new do |cmd|\r\n  cmd.use = \"my_program\"\r\n  cmd.long = \"my program's (long) description.\"\r\n\r\n  cmd.flags.add do |flag|\r\n    flag.name = \"env\"\r\n    flag.short = \"-e\"\r\n    flag.long = \"--env\"\r\n    flag.default = \"development\"\r\n    flag.description = \"The environment to run in.\"\r\n  end\r\n\r\n  cmd.flags.add do |flag|\r\n    flag.name = \"port\"\r\n    flag.short = \"-p\"\r\n    flag.long = \"--port\"\r\n    flag.default = 8080\r\n    flag.description = \"The port to bind to.\"\r\n  end\r\n\r\n  cmd.flags.add do |flag|\r\n    flag.name = \"timeout\"\r\n    flag.short = \"-t\"\r\n    flag.long = \"--timeout\"\r\n    flag.default = 29.5\r\n    flag.description = \"The wait time before dropping the connection.\"\r\n  end\r\n\r\n  cmd.flags.add do |flag|\r\n    flag.name = \"verbose\"\r\n    flag.short = \"-v\"\r\n    flag.long = \"--verbose\"\r\n    flag.default = false\r\n    flag.description = \"Enable more verbose logging.\"\r\n  end\r\n\r\n  cmd.run do |options, arguments|\r\n    options.string[\"env\"]    # => \"development\"\r\n    options.int[\"port\"]      # => 8080\r\n    options.float[\"timeout\"] # => 29.5\r\n    options.bool[\"verbose\"]  # => false\r\n    arguments                # => Array(String)\r\n  end\r\n\r\n  cmd.commands.add do |cmd|\r\n    cmd.use = \"kill <pid>\"\r\n    cmd.short = \"Kills server by pid.\"\r\n    cmd.long = cmd.short\r\n    cmd.run do |options, arguments|\r\n      arguments # => [\"62719\"]\r\n    end\r\n  end\r\nend\r\n\r\nCommander.run(cli, ARGV)\r\n```\r\n\r\nHere's what the help page looks like for this configuration:\r\n\r\n```\r\n$ my_program help\r\n\r\nmy_program - my program's (long) description.\r\n\r\nUsage:\r\n  my_program [command] [flags] [arguments]\r\n\r\nCommands:\r\n  help [command]  # Help about any command.\r\n  kill <pid>      # Kills server by pid.\r\n\r\nFlags:\r\n  -e, --env      # The environment to run in. default: 'development'.\r\n  -h, --help     # Help for this command. default: 'false'.\r\n  -p, --port     # The port to bind to. default: '8080'.\r\n  -t, --timeout  # The wait time before dropping the connection. default: '29.5'.\r\n  -v, --verbose  # Enable more verbose logging. default: 'false'.\r\n```\r\n\r\nThis is how you override the default options and pass in additional arguments:\r\n\r\n```\r\n$ my_program -ve production --port 8443 --timeout=25 arg1 arg2 arg3\r\n```\r\n\r\n```crystal\r\ncmd.run do |options, arguments|\r\n  options.string[\"env\"]    # => \"production\"\r\n  options.int[\"port\"]      # => 8443\r\n  options.float[\"timeout\"] # => 25.0\r\n  options.bool[\"verbose\"]  # => true\r\n  arguments                # => [\"arg1\", \"arg2\", \"arg3\"]\r\nend\r\n```\r\n\r\n\r\n#### Features\r\n\r\n- Define commands recursively.\r\n- Define flags on a per-command basis.\r\n  - Short argument flags (`-p 8080`)\r\n  - Short boolean flags (`-f`)\r\n  - Multi-short flags (`-fp 8080`, equivalent to `-f -p 8080`)\r\n  - Long argument flags (`--port 8080`, `--port=8080`)\r\n  - Long boolean flags (`--force`)\r\n  - Reuse flags for multiple commands (`verbose = Commander::Flag.new`)\r\n  - Define defaults for each flag\r\n  - Automatically validates, parses and casts to the correct type\r\n  - Automatically passes all parsed `options` to `cmd.run`\r\n- Receive additional cli arguments per command (`arguments` in `cmd.run`)\r\n- Automatically generates a help page for each command\r\n  - Generates a `help` command for each command to access the help page\r\n  - Generates `-h, --help` flags for each command to access to help page\r\n- Provide `Commander.run(cli, ARGV)` to handle end-user input exceptions.\r\n\r\n\r\n#### Contributing\r\n\r\n1. Fork it ( https://github.com/meskyanichi/commander/fork )\r\n2. Create your feature branch (git checkout -b my-new-feature)\r\n3. Commit your changes (git commit -am 'Add some feature')\r\n4. Push to the branch (git push origin my-new-feature)\r\n5. Create a new Pull Request\r\n\r\n[Crystal]: http://crystal-lang.org\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}